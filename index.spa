{
  "jmlVersion": "08AUG2022",
  "styles": {
	"WhiteText": "color: #fff;"
  },
  "sections": {
	"jumboParent": {
		"elementParent": "parentElement",
		"elementClass": "jumbotron text-center",
		"id": "jumbotron",
		"elementStyle": "background: #532F8C"
	},
	"jumboContainer": {
		"elementParent": "jumbotron",
		"elementClass": "container"
	},
	"copyright": {
		"elementParent": "container",
		"elementType": "p",
		"elementClass": "copyright",
		"innerText": "Â© 2013-2022 Gilgamech Technologies - Powered by Sparational.js."
	},
	"titleBanner": {
	  "elementParent": "jumbotron",
	  "elementType": "h1",
	  "innerText": "Sparational.js - make faster websites faster."
   }
  },
  "pages": {
    "howTo": {
      "elements": [
          "$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
        {"elementParent": "jumbotron", "elementType": "p", "innerText": "Write your own single page engine in browser-side Javascript, build a SPA file, or just choose a pre-built site template.", "elementStyle": "color: #fff;"},
{ "id": "container", "elementParent": "parentElement", "elementClass": "container"},
        {"id": "cBanner", "elementParent": "container", "elementClass": "grid-container grid-nav text-center"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.howTo.elements);", "innerText": "How-To Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.info.elements);", "innerText": "Info Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.functionIndex.elements);", "innerText": "Function Index"},


		{"id": "cRow", "elementParent": "container", "elementClass": "grid-container grid-info"},
        {"id": "usingTemplateArea", "elementParent": "cRow"},
        {"elementParent": "usingTemplateArea", "elementType": "h3", "innerText": "Build a page using a template:"},
        {"id": "usingTemplateAreaList", "elementParent": "usingTemplateArea", "elementType": "ul"},
        {"id": "usingTemplateAreaListItem", "elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "Templates are located at "},
        {"elementParent": "usingTemplateAreaListItem", "elementType": "a", "innerText": "http://sparational.s3-website-us-west-2.amazonaws.com/Sparational-Templates.js", "href": "http://sparational.s3-website-us-west-2.amazonaws.com/Sparational-Templates.js"},
        {"elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "Commented above the template are the data types used by the function parameters. If given the correct data types (including the ID of the location where it should be located), the page will display. As a troubleshooting aid, element IDs are logged to console as they are written to the browser's Document variable."},
        {"elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "List of addElement parameters: elementParent, innerText, elementClass, elementType, elementStyle, href, onChange, onClick, contentEditable, attributeType, attributeAction, elementId."},
        {"id": "usingCJE2Area", "elementParent": "cRow"},
        {"elementParent": "usingCJE2Area", "elementType": "h3", "innerText": "Build a page using a CJE2:"},
        {"id": "usingCJE2AreaList", "elementParent": "usingCJE2Area", "elementType": "ul"},
        {"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "CJE2 (Convert Json to html Element 2) takes an element ID and a SPA file. HTML is described in a SPA file as JSON. Each object has the same addElement parameters shown in the Using a Template section. CJE2 does use addElement to do the heavy DOM lifting."},
        {"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "Instead of specifying parameters within and between HTML tags, declare them in JSON. Use the 'id' property to give your element an ID that can be used elsewhere, or leave it blank for a randomized ID. Specifying this ID as another element's elementParent will cause that other element to be nested within this element, and SPA files generally describe HTML pages and sections as an element with an ID followed by the elements nested within it."},
        {"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "Just as with Templates, element IDs are logged to console for troubleshooting."},
        {"id": "usingJavascript", "elementParent": "cRow"},
        {"elementParent": "usingJavascript", "elementType": "h3", "innerText": "Build a programmatic page using Javascript:"},
        {"id": "usingJavascriptList", "elementParent": "usingJavascript", "elementType": "ul"},
        {"elementParent": "usingJavascriptList", "elementType": "li", "innerText": "Use addElement to make pages, readElement to pull data from divs and other elements, normal JS to transform,  functions including writeElement and mdArrayToTable to display, and webRequest to make remote API and other data calls."},
        {"elementParent": "usingJavascriptList", "elementType": "li", "innerText": "These functions can easily be incorporated directly into the onclick or onchange properties of a button, link, or other element. And they can also be easily used alongside normal JS as synchronous functional commands. (Except webRequest for obvious reasons.)"},


        {"id": "nextStepsRow", "elementParent": "cRow"},
        {"elementParent": "nextStepsRow", "elementType": "h3", "innerText": "Next Steps"},
        {"id": "nextStepsRowList", "elementParent": "nextStepsRow", "elementType": "ul"},
        {"id": "nextStepsRowItem", "elementParent": "nextStepsRowList", "elementType": "li", "innerText": "To try this with your own page, add "},
        {"elementParent": "nextStepsRowItem", "elementType": "a", "innerText": "Sparational.js", "href": "http://sparational.s3-website-us-west-2.amazonaws.com/Sparational.js"},
        {"elementParent": "nextStepsRowItem", "elementType": "span", "innerText": " to your page as a script link. Then find any Div, Input, Textarea, or other element with an ID, and replace the first variable with that ID when running this command: writeElement('replaceWithID','Hello, World!');"},
		"$_.sections.copyright"
      ]
    },
    "info": {
      "elements": [
          "$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
        {"elementParent": "jumbotron", "elementType": "p", "innerText": "Write less HTML by writing Javascript instead, and also write less Javascript.", "elementStyle": "color: #fff;"},
{ "id": "container", "elementParent": "parentElement", "elementClass": "container"},
        {"id": "cBanner", "elementParent": "container", "elementClass": "grid-container grid-nav text-center"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.howTo.elements);", "innerText": "How-To Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.info.elements);", "innerText": "Info Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.functionIndex.elements);", "innerText": "Function Index"},


        {"elementParent": "container", "elementType": "hr"},
        {"id": "cRow", "elementParent": "container", "elementClass": "grid-container grid-info"},
        {"id": "mobileFirstArea", "elementParent": "cRow"},
        {"elementParent": "mobileFirstArea", "elementType": "h3", "innerText": "Mobile First"},
        {"id": "mobileFirstAreaList", "elementParent": "mobileFirstArea", "elementType": "ul"},
        {"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Can run from local storage, S3, IPFS, IIS, Apache, container, CDN, or any number of other sources."},
        {"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Lightweight page engine uses less memory and bandwidth than most frameworks."},
        {"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Most sites can be written to operate entirely without network, only needing network access to get data on first load."},


        {"id": "philosophyArea", "elementParent": "cRow"},
        {"elementParent": "philosophyArea", "elementType": "h3", "innerText": "Philosophy"},
        {"id": "philosophyAreaList", "elementParent": "philosophyArea", "elementType": "ul"},
        {"elementParent": "philosophyAreaList", "elementType": "li", "innerText": "Make faster websites faster - reduce development and loading time by moving more into the browser. Synchronous and functional framework works great with standard Javascript. Serverless design accelerates through CDN very well."},
        {"elementParent": "philosophyAreaList", "elementType": "li", "innerText": "If architected with care and well-scoped variables, these functions can sensibly fit within a button or anchor onclick. Adding small functions as an onclick or onchange property is made easy through the $onClick and $onChange parameters of addElement, or adding e.g. 'onClick': 'writeElement(\"divName\",\"Hello, World!\")'. Functions including readElement and writeElement simplify and encourage using the DOM for data storage."},


        {"id": "serverlessDesignArea", "elementParent": "cRow"},
        {"elementParent": "serverlessDesignArea", "elementType": "h3", "innerText": "Serverless design"},
        {"id": "serverlessDesignAreaList", "elementParent": "serverlessDesignArea", "elementType": "ul"},
        {"elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Build sites entirely within the browser. Use addElement, readElement, writeElement, and more to programmatically create sites from a data source and browser window location. This is how ", "id": "liBuildSites"},
        {"elementParent": "liBuildSites", "elementType": "a", "innerText": "OfferingOverview", "href": "http://offeringoverview.s3-website-us-west-2.amazonaws.com/"},
        {"elementParent": "liBuildSites", "elementType": "span", "innerText": " operates."},
        {"elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Or build a static site entirely in a SPA file, use webRequest to load it, and let CJE2 (Convert JSON to html Elements 2) to convert this into your site - which is how this site operates."},
        {"id": "serverlessDesignAreaListItem", "elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Or have a traditional site that uses Sparational.js only in certain situations. "},
        {"elementParent": "serverlessDesignAreaListItem", "elementType": "a", "href": "https://www.gilgamech.com/", "innerText": "Gilgamech Technologies"},
        {"elementParent": "serverlessDesignAreaListItem", "elementType": "span", "innerText": " main site is still using this legacy architecture."},


        {"id": "highFlexibilityArea", "elementParent": "cRow"},
        {"elementParent": "highFlexibilityArea", "elementType": "h3", "innerText": "High Flexibility"},
        {"id": "highFlexibilityAreaList", "elementParent": "highFlexibilityArea", "elementType": "ul"},
        {"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Functional design streamlines building small functions directly in HTML onclick and other element parameters."},
        {"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Sites are running standard Javascript, and data is standard JSON, ready for your additions."},
        {"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "More CSS options: CSS styles can be specified normally, as classes declared in your own CSS file or a 3rd-party (i.e. Bootstrap), and applied in the elementClass attribute. Or they can be declared directly in the elementStyle field. These pass values directly to the new HTML element's class='' and style='' parameters. A third and fourth option are to use variable replacement to call the"},
        {"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Feel free to call external CSS and Javascript files to extend your site beyond the basics, or define & call styles and functions within the JSON data that generates the site. Or use a mix of inline and external site styles and functions. Sparational.js lets you build your serverless site however you want."},


        {"id": "nextStepsRow", "elementParent": "cRow"},
        {"elementParent": "nextStepsRow", "elementType": "h3", "innerText": "Next Steps"},
        {"id": "nextStepsRowList", "elementParent": "nextStepsRow", "elementType": "ul"},
        {"id": "nextStepsRowItem", "elementParent": "nextStepsRowList", "elementType": "li", "innerText": "Head on over to the "},


        {"elementParent": "nextStepsRowItem", "elementType": "a", "elementClass": "link", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.info.elements);", "innerText": "Info Page"},
        {"elementParent": "nextStepsRowItem", "innerText": " to get started."},
		"$_.sections.copyright"
      ]
    },
    "functionIndex": {
      "elements": [
          "$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
        {"elementParent": "jumbotron", "elementType": "p", "innerText": "Make faster websites faster.", "elementStyle": "color: #fff;"},
{ "id": "container", "elementParent": "parentElement", "elementClass": "container"},
        {"id": "cBanner", "elementParent": "container", "elementClass": "grid-container grid-nav text-center"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.howTo.elements);", "innerText": "How-To Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.info.elements);", "innerText": "Info Page"},
        {"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "deleteElement('content');addElement('body','','','','','','','','','','','content');cje2('content',sites.pages.functionIndex.elements);", "innerText": "Function Index"},


        {"id": "cRow", "elementParent": "container", "elementClass": "grid-container grid-info"},
        {"id": "elementToolsArea", "elementParent": "cRow"},
        {"elementParent": "elementToolsArea", "elementType": "h2", "innerText": "Element tools"},


        {"id": "addElementArea", "elementParent": "cRow"},
        {"elementParent": "addElementArea", "elementType": "h2", "innerText": "addElement"},
        {"elementParent": "addElementArea", "elementType": "h4", "innerText": "Adds an HTML Element to the DOM."},
        {"elementParent": "addElementArea", "elementType": "p", "innerText": "addElement($elementParent, innerText, $elementClass, $elementType, $elementStyle, $href, $onChange, $onClick, $contentEditable, $attributeType, $attributeAction, $elementId)"},
        {"id": "addElementAreaList", "elementParent": "addElementArea", "elementType": "ul"},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementParent - The ID of the parent element for this section. Usually a whole-page wrapper div."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "innerText - String to be displayed on the element. Auto-selects innerText, value, or other attribute."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementClass - CSS classes that apply to the element."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementType - HTML element type, such as div, a(nchor), span, h1, h2, h3, p(aragraph), etc."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementStyle - CSS styles that are declared directly in the element."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$href - The URI where the element should redirect. Almost always used with a(nchor) elements."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$onChange - Javascript to perform when the element value changes. Used with input, textarea, and contenteditable elements."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$onClick - Just like $onChange, the Javascript to perform when the element is clicked. Often used to dynamically rebuild a page with Sparational.js, and in this case it's best paired with the style='cursor: pointer;' to give the illusion of a normal link."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$contentEditable - Makes the element editable. Added in an earlier version for a project that required a lot of content-editable sections. May be depreciated in a future full version."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$attributeType - Allows specifying an arbitrary attribute, such as placeholder on inputs and textareas."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$attributeAction - Allows specifying a value for the attribute specified in the previous bullet point, such as the placeholder text."},
        {"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementId - ID of the element. Useful for parenting other elements under this one, interacting with other scripts and CSS, and linking directly to a location on a page."},


        {"id": "cje2Area", "elementParent": "cRow"},
        {"elementParent": "cje2Area", "elementType": "h2", "innerText": "cje2 (Full rewrite for v3)"},
        {"elementParent": "cje2Area", "elementType": "h4", "innerText": "Convert JSON to Element 2 - uses addElement to add a list of HTML Elements to the DOM. Used with SPA pages."},
        {"elementParent": "cje2Area", "elementType": "p", "innerText": "cje2(parentElement,$elements)"},
        {"id": "cje2AreaList", "elementParent": "cje2Area", "elementType": "ul"},
        {"elementParent": "cje2AreaList", "elementType": "li", "innerText": "parentElement - The ID of the parent element for this section to hang from. Usually a whole-page wrapper div. CJE2 replaces all instances of the first page's first element's elementParent with specified parentElement, so use the same elementParent for elements that should hang off the parent element - the placeholder 'parentElement' is recommended."},
        {"elementParent": "cje2AreaList", "elementType": "li", "innerText": "$elements - A JSON object with elements organized into pages. Usually from a SPA file."},


        {"id": "rwjsArea", "elementParent": "cRow"},
        {"elementParent": "rwjsArea", "elementType": "h2", "innerText": "rwjs (Full rewrite for v3)"},
        {"elementParent": "rwjsArea", "elementType": "h4", "innerText": "ReWrite JSon - Performs SPA file variable replacement. Can replace individual values (such as 'color: #fff;' as 'WhiteText'), and also whole elements (for a unified header, footer, and navigation across all pages.)"},
        {"elementParent": "rwjsArea", "elementType": "p", "innerText": "rwjs($JSON)"},
        {"id": "rwjsAreaList", "elementParent": "rwjsArea", "elementType": "ul"},
        {"elementParent": "rwjsAreaList", "elementType": "li", "innerText": "$JSON - Takes a full SPA file as input. Variable locations will be relative to the SPA file."},


        {"id": "writeElementArea", "elementParent": "cRow"},
        {"elementParent": "writeElementArea", "elementType": "h2", "innerText": "writeElement"},
        {"elementParent": "writeElementArea", "elementType": "h4", "innerText": "Has the element display the data. Adds the data to the DOM, in the element's innerText in most situations, value in others, and src sparingly."},
        {"elementParent": "writeElementArea", "elementType": "p", "innerText": "writeElement($elementId, data)"},
        {"id": "writeElementAreaList", "elementParent": "writeElementArea", "elementType": "ul"},
        {"elementParent": "writeElementAreaList", "elementType": "li", "innerText": "$elementId - the id of the element that should display the data."},
        {"elementParent": "writeElementAreaList", "elementType": "li", "innerText": "The data to display. Will become a string, so format accordingly."},


        {"id": "readElementArea", "elementParent": "cRow"},
        {"elementParent": "readElementArea", "elementType": "h2", "innerText": "readElement"},
        {"elementParent": "readElementArea", "elementType": "h4", "innerText": "Returns data being displayed by an element. Reads in the same way as writeElement writes - innerText for most, value in others, src sparingly. Pairs nicely with writeElement. Example:  onclick = 'writeElement(\"someDiv\", someOtherFunction( readElement(\"someDiv\")));'. In this example, the element 'someDiv' was read from, this was fed though some other function, and the returned value was written back to 'someDiv'. The other function could modify or transform the data in 'someDiv', or maybe just format it."},
        {"elementParent": "readElementArea", "elementType": "p", "innerText": "readElement($elementId)"},
        {"id": "readElementAreaList", "elementParent": "readElementArea", "elementType": "ul"},
        {"elementParent": "readElementAreaList", "elementType": "li", "innerText": "$elementId - The element to read from. "},


        {"id": "numericDivArea", "elementParent": "cRow"},
        {"elementParent": "numericDivArea", "elementType": "h2", "innerText": "getNumberFromDiv"},
        {"elementParent": "numericDivArea", "elementType": "h4", "innerText": "Performs readElement and ensures that the return product is numeric. Not meant for use with text."},
        {"elementParent": "numericDivArea", "elementType": "p", "innerText": "getNumberFromDiv($numericDiv)"},
        {"id": "numericDivAreaList", "elementParent": "numericDivArea", "elementType": "ul"},
        {"elementParent": "numericDivAreaList", "elementType": "li", "innerText": "$numericDiv - The element to read from. Can be any element type, not just div."},


        {"id": "deleteElementArea", "elementParent": "cRow"},
        {"elementParent": "deleteElementArea", "elementType": "h2", "innerText": "deleteElement"},
        {"elementParent": "deleteElementArea", "elementType": "h4", "innerText": "Deletes the specified element and all children. Useful for removing sections or pages, before replacing it with another."},
        {"elementParent": "deleteElementArea", "elementType": "p", "innerText": "deleteElement($elementId)"},
        {"id": "deleteElementAreaList", "elementParent": "deleteElementArea", "elementType": "ul"},
        {"elementParent": "deleteElementAreaList", "elementType": "li", "innerText": "$elementId - The element to read from. "},


        {"id": "appendElementArea", "elementParent": "cRow"},
        {"elementParent": "appendElementArea", "elementType": "h2", "innerText": "appendElement"},
        {"elementParent": "appendElementArea", "elementType": "h4", "innerText": "Appends data to an element. "},
        {"elementParent": "appendElementArea", "elementType": "p", "innerText": "appendElement($elementId, data)"},
        {"id": "appendElementAreaList", "elementParent": "appendElementArea", "elementType": "ul"},
        {"elementParent": "appendElementAreaList", "elementType": "li", "innerText": "$elementId - The element to read from. "},
        {"elementParent": "appendElementAreaList", "elementType": "li", "innerText": "data - the data to append. Will be used as a string."},


        {"id": "toggleElementArea", "elementParent": "cRow"},
        {"elementParent": "toggleElementArea", "elementType": "h2", "innerText": "toggleElement"},
        {"elementParent": "toggleElementArea", "elementType": "h4", "innerText": "Toggles the visibility of an element. May be depreciated in a future full version."},
        {"elementParent": "toggleElementArea", "elementType": "p", "innerText": "toggleElement($elementId)"},
        {"id": "toggleElementAreaList", "elementParent": "toggleElementArea", "elementType": "ul"},
        {"elementParent": "toggleElementAreaList", "elementType": "li", "innerText": "$elementId - The element whose visibility gets toggled."},


        {"id": "hideElementArea", "elementParent": "cRow"},
        {"elementParent": "hideElementArea", "elementType": "h2", "innerText": "hideElement"},
        {"elementParent": "hideElementArea", "elementType": "h4", "innerText": "Makes an element not visible. May be depreciated in a future full version."},
        {"elementParent": "hideElementArea", "elementType": "p", "innerText": "hideElement($elementId)"},
        {"id": "hideElementAreaList", "elementParent": "hideElementArea", "elementType": "ul"},
        {"elementParent": "hideElementAreaList", "elementType": "li", "innerText": "$elementId - The element to hide. "},


        {"id": "showElementArea", "elementParent": "cRow"},
        {"elementParent": "showElementArea", "elementType": "h2", "innerText": "showElement"},
        {"elementParent": "showElementArea", "elementType": "h4", "innerText": "Makes an element visible. May be depreciated in a future full version."},
        {"elementParent": "showElementArea", "elementType": "p", "innerText": "showElement($elementId)"},
        {"id": "showElementAreaList", "elementParent": "showElementArea", "elementType": "ul"},
        {"elementParent": "showElementAreaList", "elementType": "li", "innerText": "$elementId - The element to show. "},


        {"id": "textToolsArea", "elementParent": "cRow"},
        {"elementParent": "textToolsArea", "elementType": "h2", "innerText": "Text tools"},
        {"id": "textToolsAreaList", "elementParent": "textToolsArea", "elementType": "ul"},

        {"id": "newArea", "elementParent": "cRow"},
        {"elementParent": "newArea", "elementType": "h2", "innerText": "colorifyWords"},
        {"elementParent": "newArea", "elementType": "h4", "innerText": "Adds a span with the specified class, for every instance of a word in the HTML element. Made to highlight a word so it stands out."},
        {"elementParent": "textToolsAreaList", "elementType": "p", "innerText": "colorifyWords(divid, replaceWord, replaceClass)"},
        {"id": "newAreaList", "elementParent": "newArea", "elementType": "ul"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "divid - ID of the HTML element. Works with any element, not just divs."},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "replaceWord - The word or phrase to replace."},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "replaceClass - The class to apply to the new span. Use CSS to specify a color for that class."},

        {"id": "newArea", "elementParent": "cRow"},
        {"elementParent": "newArea", "elementType": "h2", "innerText": "colorifyMultipleWords"},
        {"elementParent": "newArea", "elementType": "h4", "innerText": "Applies colorifyWords to an array of words."},
        {"elementParent": "textToolsAreaList", "elementType": "p", "innerText": "colorifyMultipleWords(divList, wordList, replaceClass)"},
        {"id": "newAreaList", "elementParent": "newArea", "elementType": "ul"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "divList"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "wordList"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "replaceClass"},

        {"id": "newArea", "elementParent": "cRow"},
        {"elementParent": "newArea", "elementType": "h2", "innerText": "addPopupToWord"},
        {"elementParent": "newArea", "elementType": "h4", "innerText": ""},
        {"elementParent": "textToolsAreaList", "elementType": "p", "innerText": "addPopupToWord(divid, replaceWord, popupText, outputClasses)"},
        {"id": "newAreaList", "elementParent": "newArea", "elementType": "ul"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "divid"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "replaceWord"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "popupText"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "outputClasses"},

        {"id": "newArea", "elementParent": "cRow"},
        {"elementParent": "newArea", "elementType": "h2", "innerText": "addLinkToWord"},
        {"elementParent": "newArea", "elementType": "h4", "innerText": ""},
        {"elementParent": "textToolsAreaList", "elementType": "p", "innerText": "addLinkToWord(divid, replaceWord, URI)"},
        {"id": "newAreaList", "elementParent": "newArea", "elementType": "ul"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "divid"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "replaceWord"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": "URI"},




        {"id": "newArea", "elementParent": "cRow"},
        {"elementParent": "newArea", "elementType": "h2", "innerText": "showElement"},
        {"elementParent": "newArea", "elementType": "h4", "innerText": ""},
        {"elementParent": "newArea", "elementType": "p", "innerText": "showElement($elementId)"},
        {"id": "newAreaList", "elementParent": "newArea", "elementType": "ul"},
        {"elementParent": "newAreaList", "elementType": "li", "innerText": ""},





        {"id": "supportingToolsArea", "elementParent": "cRow"},
        {"elementParent": "supportingToolsArea", "elementType": "h2", "innerText": "Supporting tools"},
        {"id": "supportingToolsAreaList", "elementParent": "supportingToolsArea", "elementType": "ul"},

        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "webRequest($verb, $URI, $callback, $JSON, $file, $cached)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "getBadPW()"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "getKeys(obj)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "onlyUnique(value, index, self)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "textToNumNotation($inputObject)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "numToTextNotation($inputObject, round)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "detectEnter($keypress, $callback)"},
        {"elementParent": "supportingToolsAreaList", "elementType": "li", "innerText": "getRoundedNumber(number, digits)"},

        {"id": "tableToolsArea", "elementParent": "cRow"},
        {"elementParent": "tableToolsArea", "elementType": "h2", "innerText": "Table tools"},
        {"id": "tableToolsAreaList", "elementParent": "tableToolsArea", "elementType": "ul"},

        {"elementParent": "tableToolsAreaList", "elementType": "li", "innerText": "mdArrayToTable(parentDivID, newTableID, array)"},
        {"elementParent": "tableToolsAreaList", "elementType": "li", "innerText": "columnMath(TableAid, inputACol, TableBid, inputBCol, rowBAdj, TableOutid, outputCol, mathOperation, roundDigits, formatMaxOutput, newOutColumnName)"},
        {"elementParent": "tableToolsAreaList", "elementType": "li", "innerText": "addTable(parentDivID, newTableID, columnData, divClass)"},
        {"elementParent": "tableToolsAreaList", "elementType": "li", "innerText": "addColumn(tableid, columnData, headLess)"},
        {"elementParent": "tableToolsAreaList", "elementType": "li", "innerText": "deleteColumn(tableid)"},


        {"id": "tableSupportingToolsArea", "elementParent": "cRow"},
        {"elementParent": "tableSupportingToolsArea", "elementType": "h2", "innerText": "Table supporting tools"},
        {"id": "tableSupportingToolsAreaList", "elementParent": "tableSupportingToolsArea", "elementType": "ul"},

        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "sortAlphaTable(currentColumn, tableid)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "sortNumTable(currentColumn, tableid)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "rotateArray(inArray, num)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "groupArray(arrayToGroup)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "returnAllValues(col, tableid)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "getMaxOfArray(array)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "getMinOfArray(array)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "formatMax(targetColumn, tableid)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "addRowHandlers(col, tableid)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "returnTablePart(tableid, tablePart)"},
        {"elementParent": "tableSupportingToolsAreaList", "elementType": "li", "innerText": "createClickHandler(col, table)"},
		"$_.sections.copyright"
      ]
    }
  }
}