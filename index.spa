{
  "jmlVersion": "08AUG2022",
  "styles": {
	"white": "color: #fff;"
  },
  "classes": {
	"gridInfo": "grid-container grid-info "
  },
  "sections": {
	"jumboParent": {"elementParent": "parentElement", "elementClass": "jumbotron text-center", "id": "jumbotron", "elementStyle": "background: #532F8C"},
	"jumboContainer": {"elementParent": "jumbotron","elementClass": "container"},
	"titleBanner": {"elementParent": "jumbotron", "elementType": "h1", "innerText": "Sparational.js - make faster websites faster."},
	"container":{ "id": "container", "elementParent": "parentElement"},
	"cBanner": {"id": "cBanner", "elementParent": "container", "elementClass": "grid-container grid-nav text-center"},

	"howTo":{"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "rebuildElement('content');cje2('content',sites.pages.howTo.elements);", "innerText": "How-To Page"},
	"info":{"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "rebuildElement('content');cje2('content',sites.pages.info.elements);", "innerText": "Information"},
	"functionIndex":{"elementParent": "cBanner", "elementType": "a", "elementClass": "grid", "onClick": "rebuildElement('content');cje2('content',sites.pages.functionIndex.elements);", "innerText": "Function Index"},
	"hr":{"elementParent": "container", "elementType": "hr"},

	"gridDiv": {"id": "cRow", "elementParent": "container", "elementClass": "$_.classes.gridInfo"},

	"copyright": {"elementParent": "container", "elementType": "p", "elementClass": "copyright", "innerText": "Â© 2013-2022 Gilgamech Technologies - Powered by Sparational.js."}
  },
  "pages": {
    "howTo": {
      "elements": [
		  "$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
		{"elementParent": "jumbotron", "elementType": "p", "innerText": "Write your own single page engine in browser-side Javascript, add a sitelet to your site, build your site as a SPA file, or just choose a pre-built site template.", "elementStyle": "$_.styles.white"},
		"$_.sections.container", "$_.sections.cBanner", 
		"$_.sections.howTo", "$_.sections.info", "$_.sections.functionIndex", 
		"$_.sections.hr", 

		"$_.sections.gridDiv", 
		{"id": "usingTemplateArea", "elementParent": "cRow"},

		{"elementParent": "usingTemplateArea", "elementType": "h3", "innerText": "Build a page using a template:"},
		{"id": "usingTemplateAreaList", "elementParent": "usingTemplateArea", "elementType": "ul"},
		{"elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "Currently there are 2 templates available: Grid page and Info page."},
		{"id": "usingTemplateAreaListItem", "elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "Templates are located here: "},
		{"elementParent": "usingTemplateAreaListItem", "elementType": "a", "innerText": "Grid Page", "href": "https://www.Sparational.com/templates/gridPage.js"},
		{"elementParent": "usingTemplateAreaListItem", "elementType": "span", "innerText": " and "},
		{"elementParent": "usingTemplateAreaListItem", "elementType": "a", "innerText": "Info Page", "href": "https://www.Sparational.com/templates/infoPage.js"},
		{"elementParent": "usingTemplateAreaList", "elementType": "li", "innerText": "Commented above the template are the data types used by the function parameters. If given the correct data types (including the ID of the location where it should be located), the page will display. As a troubleshooting aid, element IDs are logged to console as they are written to the browser's Document variable."},

		{"id": "usingSitelet", "elementParent": "cRow"},
		{"elementParent": "usingSitelet", "elementType": "h3", "innerText": "Add a sitelet to your site:"},
		{"id": "usingSiteletList", "elementParent": "usingSitelet", "elementType": "ul"},
		{"elementParent": "usingSiteletList", "elementType": "li", "innerText": "There is 1 sitelet currently available, the RGB Calculator, which gives a new perspective on HTML colors."},
		{"elementParent": "usingSiteletList", "elementType": "li", "innerText": "To use it, add the script to your page with this script link: <script src='https://www.Sparational.com/sitelets/rgbSitelet.js'></script>."},
		{"elementParent": "usingSiteletList", "elementType": "li", "innerText": "Then just run 'buildRgbSitelet(\"divToUse\")' and the RGB calculator will show up within the div specified. Can be other element types (span, p, etc) but may not work within textareas, inputs, buttons, etc."},

		{"id": "usingCJE2Area", "elementParent": "cRow"},
		{"elementParent": "usingCJE2Area", "elementType": "h3", "innerText": "Build a page using CJE2:"},
		{"id": "usingCJE2AreaList", "elementParent": "usingCJE2Area", "elementType": "ul"},
		{"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "CJE2 (Convert Json to html Element 2) takes an element ID and a SPA file. HTML is described in a SPA file as JSON. The only mandatory parameter is elementParent, which specifies where the element will live. Each object has the following parameters:"},
		{"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "elementParent, innerText, elementClass, elementType, elementStyle, href, onChange, onClick, contentEditable, attributeType, attributeAction, elementId."},
		{"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "Instead of specifying parameters within and between HTML tags, declare them in JSON. Use the 'id' property to give your element an ID that can be used elsewhere, or leave it blank for a randomized ID. Specifying this ID as another element's elementParent will cause that other element to be nested within this element, and SPA files generally describe HTML pages and sections as an element with an ID followed by the elements nested within it."},
		{"elementParent": "usingCJE2AreaList", "elementType": "li", "innerText": "Just as with Templates, element IDs are logged to console for troubleshooting."},
		{"id": "usingJavascript", "elementParent": "cRow"},

		{"elementParent": "usingJavascript", "elementType": "h3", "innerText": "Build a programmatic page using Javascript:"},
		{"id": "usingJavascriptList", "elementParent": "usingJavascript", "elementType": "ul"},
		{"elementParent": "usingJavascriptList", "elementType": "li", "innerText": "Use addElement to make pages, readElement to pull data from divs and other elements, normal JS to transform,  functions including writeElement and mdArrayToTable to display, and webRequest to make remote API and other data calls."},
		{"elementParent": "usingJavascriptList", "elementType": "li", "innerText": "These functions can easily be incorporated directly into the onclick or onchange properties of a button, link, or other element. And they can also be easily used alongside normal JS as synchronous functional commands."},

		{"id": "nextStepsRow", "elementParent": "cRow"},
		{"elementParent": "nextStepsRow", "elementType": "h3", "innerText": "Next Steps"},
		{"id": "nextStepsRowList", "elementParent": "nextStepsRow", "elementType": "ul"},
		{"id": "nextStepsRowItem", "elementParent": "nextStepsRowList", "elementType": "li", "innerText": "To try this with your own page, add "},
		{"elementParent": "nextStepsRowItem", "elementType": "a", "innerText": "Sparational.js", "href": "https://www.Sparational.com/Sparational.js"},
		{"elementParent": "nextStepsRowItem", "elementType": "span", "innerText": " to your page as a script link: <script src='https://www.Sparational.com/Sparational.js'></script>. Then find any Div, Input, Textarea, or other element with an ID, and replace the first variable with that ID when running this command: writeElement('replaceWithID','Hello, World!');"},
		"$_.sections.copyright"
      ]
    },
    "info": {
      "elements": [
		"$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
		{"elementParent": "jumbotron", "elementType": "p", "innerText": "Write less HTML by writing Javascript instead, and also write less Javascript.", "elementStyle": "$_.styles.white"},
		"$_.sections.container", "$_.sections.cBanner", 
		"$_.sections.howTo", "$_.sections.info", "$_.sections.functionIndex", 
		"$_.sections.hr", 

		"$_.sections.gridDiv", 

		{"id": "philosophyArea", "elementParent": "cRow"},
		{"elementParent": "philosophyArea", "elementType": "h3", "innerText": "Philosophy"},
		{"id": "philosophyAreaList", "elementParent": "philosophyArea", "elementType": "ul"},
		{"elementParent": "philosophyAreaList", "elementType": "li", "innerText": "Make faster websites faster - reduce development and loading time by moving more into the browser. Synchronous and functional framework works great with standard Javascript. Serverless design accelerates through CDN very well."},
		{"elementParent": "philosophyAreaList", "elementType": "li", "innerText": "If architected with care and well-scoped variables, these functions can sensibly fit within a button or anchor onclick. Adding small functions as an onclick or onchange property is made easy through the $onClick and $onChange parameters of addElement, or adding e.g. 'onClick': 'writeElement(\"divName\",\"Hello, World!\")'. Functions including readElement and writeElement simplify and encourage using the DOM for data storage."},


		{"id": "mobileFirstArea", "elementParent": "cRow"},
		{"elementParent": "mobileFirstArea", "elementType": "h3", "innerText": "Mobile First"},
		{"id": "mobileFirstAreaList", "elementParent": "mobileFirstArea", "elementType": "ul"},
		{"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Can run from local storage, S3, IPFS, IIS, Apache, container, CDN, or any number of other sources."},
		{"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Lightweight page engine uses less memory and bandwidth than most frameworks."},
		{"elementParent": "mobileFirstAreaList", "elementType": "li", "innerText": "Most sites can be written to operate entirely without network, only needing network access to get data on first load."},


		{"id": "serverlessDesignArea", "elementParent": "cRow"},
		{"elementParent": "serverlessDesignArea", "elementType": "h3", "innerText": "Serverless design"},
		{"id": "serverlessDesignAreaList", "elementParent": "serverlessDesignArea", "elementType": "ul"},
		{"elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Build sites entirely within the browser. Use addElement, readElement, writeElement, and more to create a page engine which programmatically creates sites from a data source and browser window location. Or choose one of our template page engines.This is how ", "id": "liBuildSites"},
		{"elementParent": "liBuildSites", "elementType": "a", "innerText": "OfferingOverview", "href": "https://offeringoverview.s3-website-us-west-2.amazonaws.com/"},
		{"elementParent": "liBuildSites", "elementType": "span", "innerText": " operates."},
		{"elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Build a static site entirely in a SPA file, use webRequest to load it, and let CJE2 (Convert JSON to html Elements 2) to convert this into your site - which is how this site operates."},
		{"id": "serverlessDesignAreaListItem", "elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Have a traditional site that uses Sparational.js only in certain situations. "},
		{"elementParent": "serverlessDesignAreaListItem", "elementType": "a", "href": "https://www.gilgamech.com/", "innerText": "Gilgamech Technologies"},
		{"elementParent": "serverlessDesignAreaListItem", "elementType": "span", "innerText": " main site is still using this legacy architecture."},

		{"id": "serverlessDesignAreaListItem2", "elementParent": "serverlessDesignAreaList", "elementType": "li", "innerText": "Make sitelets in the same way as making a page engine described above - but scoped to tools or applications. Our first sitelet, the RGB Calculator, can be found "},
		{"elementParent": "serverlessDesignAreaListItem2", "elementType": "a", "href": "https://www.Sparational.com/sitelets/rgbSitelet.js", "innerText": "here"},
		{"elementParent": "serverlessDesignAreaListItem2", "elementType": "span", "innerText": ". It converts HTML hex color codes into red, blue, and green values and back - while updating the input and title box colors with their value."},


		{"id": "highFlexibilityArea", "elementParent": "cRow"},
		{"elementParent": "highFlexibilityArea", "elementType": "h3", "innerText": "High Flexibility"},
		{"id": "highFlexibilityAreaList", "elementParent": "highFlexibilityArea", "elementType": "ul"},
		{"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Functional design streamlines building small functions directly in HTML onclick and other element parameters."},
		{"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Sites are running standard Javascript, and data is standard JSON, ready for your additions."},
		{"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "More CSS options: CSS styles can be specified normally, as classes declared in your own CSS file or a 3rd-party (i.e. Bootstrap), and applied in the elementClass attribute. Or they can be declared directly in the elementStyle field. These pass values directly to the new HTML element's class='' and style='' parameters. A third and fourth option are to use variable replacement to set either the class or the style with a variable. This helps ensure constant styling across the site, even where CSS is being overridden, while centralizing the data, so updating one location will update them all."},
		{"elementParent": "highFlexibilityAreaList", "elementType": "li", "innerText": "Feel free to call external CSS and Javascript files to extend your site beyond the basics, or define & call styles and functions within the JSON data that generates the site. Or use a mix of inline and external site styles and functions. Sparational.js lets you build your serverless site however you want."},
		
		
		{"id": "spaFileFormat", "elementParent": "cRow"},
		{"elementParent": "spaFileFormat", "elementType": "h3", "innerText": "SPA file format"},
		{"id": "spaFileFormatList", "elementParent": "spaFileFormat", "elementType": "ul"},
		{"elementParent": "spaFileFormatList", "elementType": "li", "innerText": "SPA file format is modified JML (JSON Markup Language) designed to work with HTML instead of XML, and is pronounced like William Shatner saying 'Spock'."},
		{"elementParent": "spaFileFormatList", "elementType": "li", "innerText": "In SPA, HTML elements are described by JSON objects, such as the one you're reading: {'elementParent': 'spaFileFormatList', 'elementType': 'li', 'innerText': 'In JML, HTML elements are described by JSON objects, such as the one you're reading:'}"},
		
		
		{"id": "nextStepsRow", "elementParent": "cRow"},
		{"elementParent": "nextStepsRow", "elementType": "h3", "innerText": "Next Steps"},
		{"id": "nextStepsRowList", "elementParent": "nextStepsRow", "elementType": "ul"},
		{"id": "nextStepsRowItem", "elementParent": "nextStepsRowList", "elementType": "li", "innerText": "Head on over to the "},
		{"elementParent": "nextStepsRowItem", "elementType": "a", "elementClass": "link", "onClick": "rebuildElement('content');cje2('content',sites.pages.howTo.elements);", "innerText": "How-To Page"},
		{"elementParent": "nextStepsRowItem", "innerText": " to get started.","elementType":"span"},
		"$_.sections.copyright"
      ]
    },
    "functionIndex": {
      "elements": [
		  "$_.sections.jumboParent", "$_.sections.jumboContainer", "$_.sections.titleBanner",
		{"elementParent": "jumbotron", "elementType": "p", "innerText": "Learn how much faster you can make your site faster.", "elementStyle": "$_.styles.white"},
		"$_.sections.container", "$_.sections.cBanner", 
		"$_.sections.howTo", "$_.sections.info", "$_.sections.functionIndex", 
		"$_.sections.hr", 


		{"id": "cRow", "elementParent": "container"},
		{"elementParent": "cRow", "elementType": "h1", "innerText": "Element tools"},
		{"id": "elementToolsArea", "elementParent": "cRow", "elementClass": "$_.classes.gridInfo"},


		{"id": "addElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "addElementArea", "elementType": "h3", "innerText": "addElement"},
		{"elementParent": "addElementArea", "elementType": "h6", "innerText": "Adds an HTML Element to the DOM."},
		{"elementParent": "addElementArea", "elementType": "p", "innerText": "Example: addElement('content','Hello, World!'); - this adds an element with the text 'Hello, World!' to the DOM body inside the first element with id='content'."},
		{"elementParent": "addElementArea", "elementType": "p", "innerText": "Returns: ID (string) of new element. This can be safely ignored."},
		{"elementParent": "addElementArea", "elementType": "p", "innerText": "addElement($elementParent, innerText, $elementClass, $elementType, $elementStyle, $href, $onChange, $onClick, $contentEditable, $attributeType, $attributeAction, $elementId)"},
		{"id": "addElementAreaList", "elementParent": "addElementArea", "elementType": "ul"},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementParent (string) - ID of the parent element for this section. Usually a whole-page wrapper div."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "innerText (string) - Text to be displayed on the element. Auto-selects innerText, value, or other attribute."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementClass (string) - CSS classes that apply to the element."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementType (string) - HTML element type, such as div, a(nchor), span, h1, h3, h3, p(aragraph), etc."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementStyle (string) - CSS styles that are declared directly in the element."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$href (string) - URI where the element should redirect. Almost always used with a(nchor) elements."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$onChange (string) - Javascript to perform when the element value changes. Used with input, textarea, and contenteditable elements."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$onClick (string) - Just like $onChange, the Javascript to perform when the element is clicked. Often used to dynamically rebuild a page with Sparational.js, and in this case it's best paired with the style='cursor: pointer;' to give the illusion of a normal link."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$contentEditable (switch) - Makes the element editable. Added in an earlier version for a project that required a lot of content-editable sections. May be depreciated in a future full version."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$attributeType (string) - Allows specifying an arbitrary attribute, such as placeholder on inputs and textareas."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$attributeAction (string) - Allows specifying a value for the attribute specified in the previous bullet point, such as the placeholder text."},
		{"elementParent": "addElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of the element. Useful for parenting other elements under this one, interacting with other scripts and CSS, and linking directly to a location on a page. This will show up in the console on every page load as a log of elements added, so name for posterity."},


		{"id": "cje2Area", "elementParent": "elementToolsArea"},
		{"elementParent": "cje2Area", "elementType": "h3", "innerText": "cje2 (Full rewrite for v3)"},
		{"elementParent": "cje2Area", "elementType": "h6", "innerText": "Convert JSON to Element 2 - uses addElement to add a list of HTML Elements to the DOM. Used with SPA pages."},
		{"elementParent": "cje2Area", "elementType": "p", "innerText": "Example: cje2({'id': 'cje2Area', 'elementParent': 'elementToolsArea'}"},
		{"elementParent": "cje2Area", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "cje2Area", "elementType": "p", "innerText": "cje2(parentElement,$elements)"},
		{"id": "cje2AreaList", "elementParent": "cje2Area", "elementType": "ul"},
		{"elementParent": "cje2AreaList", "elementType": "li", "innerText": "parentElement (string) - The ID of the parent element for this section to hang from. Usually a whole-page wrapper div. CJE2 replaces all instances of the first page's first element's elementParent with specified parentElement, so use the same elementParent for elements that should hang off the parent element - the placeholder 'parentElement' is recommended."},
		{"elementParent": "cje2AreaList", "elementType": "li", "innerText": "$elements (list of key-object pairs) - page of elements. Usually from a SPA file's contents."},


		{"id": "rwjsArea", "elementParent": "elementToolsArea"},
		{"elementParent": "rwjsArea", "elementType": "h3", "innerText": "rwjs (Full rewrite for v3)"},
		{"elementParent": "rwjsArea", "elementType": "h6", "innerText": "ReWrite JSon - Performs SPA file variable replacement. Can replace individual values and also whole elements (for a unified header, footer, and navigation across all pages.)"},
		{"elementParent": "rwjsArea", "elementType": "p", "innerText": "Example: page contains {'styles': { 'purpleBG': 'background: #532F8C;'}} and in any element 'elementStyle':'$_.styles.purpleBG' will be replaced with the background color style."},		
		{"elementParent": "rwjsArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "rwjsArea", "elementType": "p", "innerText": "rwjs($JSON)"},
		{"id": "rwjsAreaList", "elementParent": "rwjsArea", "elementType": "ul"},
		{"elementParent": "rwjsAreaList", "elementType": "li", "innerText": "$JSON (complex object) - Full SPA file contents. Variable locations are relative to the SPA file."},


		{"id": "writeElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "writeElementArea", "elementType": "h3", "innerText": "writeElement"},
		{"elementParent": "writeElementArea", "elementType": "h6", "innerText": "Has the element display the data. Adds the data to the DOM, in the element's innerText in most situations, value in others, and src sparingly."},
		{"elementParent": "writeElementArea", "elementType": "p", "innerText": "Example: writeElement(elementId,'Hello, World!');"},
		{"elementParent": "writeElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "writeElementArea", "elementType": "p", "innerText": "writeElement($elementId, data)"},
		{"id": "writeElementAreaList", "elementParent": "writeElementArea", "elementType": "ul"},
		{"elementParent": "writeElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of the element to display the data."},
		{"elementParent": "writeElementAreaList", "elementType": "li", "innerText": "data (string) - Text to display."},


		{"id": "readElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "readElementArea", "elementType": "h3", "innerText": "readElement"},
		{"elementParent": "readElementArea", "elementType": "h6", "innerText": "Returns data being displayed by an element. Reads in the same way as writeElement writes - innerText for most, value in others, src sparingly. Pairs nicely with writeElement. Example:  onclick = 'writeElement(\"someDiv\", someOtherFunction( readElement(\"someDiv\")));'. In this example, the element 'someDiv' was read from, this was fed though some other function, and the returned value was written back to 'someDiv'. The other function could modify or transform the data in 'someDiv', or maybe just format it."},
		{"elementParent": "readElementArea", "elementType": "p", "innerText": "Example: var name = readElement('userNameInput')"},
		{"elementParent": "readElementArea", "elementType": "p", "innerText": "Returns: (string) the data displayed in the element."},
		{"elementParent": "readElementArea", "elementType": "p", "innerText": "readElement($elementId)"},
		{"id": "readElementAreaList", "elementParent": "readElementArea", "elementType": "ul"},
		{"elementParent": "readElementAreaList", "elementType": "li", "innerText": "$elementId (string) - The element to read from."},


		{"id": "numericDivArea", "elementParent": "elementToolsArea"},
		{"elementParent": "numericDivArea", "elementType": "h3", "innerText": "getNumberFromDiv"},
		{"elementParent": "numericDivArea", "elementType": "h6", "innerText": "Performs readElement and ensures that the return product is numeric. Not meant for use with text."},
		{"elementParent": "numericDivArea", "elementType": "p", "innerText": "Example: var age = getNumberFromDiv('userAgeInput')"},
		{"elementParent": "numericDivArea", "elementType": "p", "innerText": "Returns: (integer) the data displayed in the element."},
		{"elementParent": "numericDivArea", "elementType": "p", "innerText": "getNumberFromDiv($numericDiv)"},
		{"id": "numericDivAreaList", "elementParent": "numericDivArea", "elementType": "ul"},
		{"elementParent": "numericDivAreaList", "elementType": "li", "innerText": "$numericDiv (string) - ID of element to read from. Can be any element type, not just div."},


		{"id": "deleteElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "deleteElementArea", "elementType": "h3", "innerText": "deleteElement"},
		{"elementParent": "deleteElementArea", "elementType": "h6", "innerText": "Deletes the specified element and all children. Useful for removing sections or whole pages, before replacing with another."},
		{"elementParent": "deleteElementArea", "elementType": "p", "innerText": "Example: deleteElement('content')"},
		{"elementParent": "deleteElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "deleteElementArea", "elementType": "p", "innerText": "deleteElement($elementId)"},
		{"id": "deleteElementAreaList", "elementParent": "deleteElementArea", "elementType": "ul"},
		{"elementParent": "deleteElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of element to read from."},


		{"id": "appendElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "appendElementArea", "elementType": "h3", "innerText": "appendElement"},
		{"elementParent": "appendElementArea", "elementType": "h6", "innerText": "Appends data to an element. "},
		{"elementParent": "appendElementArea", "elementType": "p", "innerText": "Example: appendElement('userDetails',user.phoneNo)"},
		{"elementParent": "appendElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "appendElementArea", "elementType": "p", "innerText": "appendElement($elementId, data)"},
		{"id": "appendElementAreaList", "elementParent": "appendElementArea", "elementType": "ul"},
		{"elementParent": "appendElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of element to append."},
		{"elementParent": "appendElementAreaList", "elementType": "li", "innerText": "data (string) - Text to append."},


		{"id": "toggleElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "toggleElementArea", "elementType": "h3", "innerText": "toggleElement"},
		{"elementParent": "toggleElementArea", "elementType": "h6", "innerText": "Toggles the visibility of an element. May be depreciated in a future full version."},
		{"elementParent": "toggleElementArea", "elementType": "p", "innerText": "Example: toggleElement('menuDropDown')"},
		{"elementParent": "toggleElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "toggleElementArea", "elementType": "p", "innerText": "toggleElement($elementId)"},
		{"id": "toggleElementAreaList", "elementParent": "toggleElementArea", "elementType": "ul"},
		{"elementParent": "toggleElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of element whose visibility gets toggled."},


		{"id": "hideElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "hideElementArea", "elementType": "h3", "innerText": "hideElement"},
		{"elementParent": "hideElementArea", "elementType": "h6", "innerText": "Makes an element not visible. May be depreciated in a future full version."},
		{"elementParent": "hideElementArea", "elementType": "p", "innerText": "Example: hideElement('menuDropDown')"},
		{"elementParent": "hideElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "hideElementArea", "elementType": "p", "innerText": "hideElement($elementId)"},
		{"id": "hideElementAreaList", "elementParent": "hideElementArea", "elementType": "ul"},
		{"elementParent": "hideElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of element to hide. "},


		{"id": "showElementArea", "elementParent": "elementToolsArea"},
		{"elementParent": "showElementArea", "elementType": "h3", "innerText": "showElement"},
		{"elementParent": "showElementArea", "elementType": "h6", "innerText": "Makes an element visible. May be depreciated in a future full version."},
		{"elementParent": "showElementArea", "elementType": "p", "innerText": "Example: showElement('menuDropDown')"},
		{"elementParent": "showElementArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "showElementArea", "elementType": "p", "innerText": "showElement($elementId)"},
		{"id": "showElementAreaList", "elementParent": "showElementArea", "elementType": "ul"},
		{"elementParent": "showElementAreaList", "elementType": "li", "innerText": "$elementId (string) - ID of element to show. "},


		{"elementParent": "cRow", "elementType": "h1", "innerText": "Text tools"},
		{"id": "textToolsArea", "elementParent": "cRow", "elementClass": "$_.classes.gridInfo"},

		{"id": "colorifyWordsArea", "elementParent": "textToolsArea"},
		{"elementParent": "colorifyWordsArea", "elementType": "h3", "innerText": "colorifyWords"},
		{"elementParent": "colorifyWordsArea", "elementType": "h6", "innerText": "Adds a span with the specified class, for every instance of a word in the HTML element. Made to highlight a word so it stands out."},
		{"elementParent": "colorifyWordsArea", "elementType": "p", "innerText": "Example: colorifyWords('content', 'red', 'redText')"},
		{"elementParent": "colorifyWordsArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "colorifyWordsArea", "elementType": "p", "innerText": "colorifyWords(divid, replaceWord, replaceClass)"},
		{"id": "colorifyWordsAreaList", "elementParent": "colorifyWordsArea", "elementType": "ul"},
		{"elementParent": "colorifyWordsAreaList", "elementType": "li", "innerText": "divid (string) - ID of the HTML element. Works with any element, not just divs."},
		{"elementParent": "colorifyWordsAreaList", "elementType": "li", "innerText": "replaceWord (string) - String to replace."},
		{"elementParent": "colorifyWordsAreaList", "elementType": "li", "innerText": "replaceClass (string) - CSS class to apply to the colorifyWords span. Use normal CSS to specify a color for that class."},

		{"id": "colorifyMultipleWordsArea", "elementParent": "textToolsArea"},
		{"elementParent": "colorifyMultipleWordsArea", "elementType": "h3", "innerText": "colorifyMultipleWords"},
		{"elementParent": "colorifyMultipleWordsArea", "elementType": "h6", "innerText": "Applies colorifyWords to an array of words across an array of elements."},
		{"elementParent": "colorifyMultipleWordsArea", "elementType": "p", "innerText": "Example: colorifyMultipleWords(['content','output'], [blue,sky], 'blueText')"},
		{"elementParent": "colorifyMultipleWordsArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "colorifyMultipleWordsArea", "elementType": "p", "innerText": "colorifyMultipleWords(divList, wordList, replaceClass)"},
		{"id": "colorifyMultipleWordsAreaList", "elementParent": "colorifyMultipleWordsArea", "elementType": "ul"},
		{"elementParent": "colorifyMultipleWordsAreaList", "elementType": "li", "innerText": "divList (array) - Array of HTML element IDs. Works with any element, not just divs."},
		{"elementParent": "colorifyMultipleWordsAreaList", "elementType": "li", "innerText": "wordList (array) - Array of strings to make colorful."},
		{"elementParent": "colorifyMultipleWordsAreaList", "elementType": "li", "innerText": "replaceClass (string) - CSS class to apply to the colorifyMultipleWords spans. Use normal CSS to specify a color for that class."},

		{"id": "addPopupArea", "elementParent": "textToolsArea"},
		{"elementParent": "addPopupArea", "elementType": "h3", "innerText": "addPopupToWord"},
		{"elementParent": "addPopupArea", "elementType": "h6", "innerText": "Wraps the replaceWord in a span, and adds the popupText to an inner span. Requires CSS class 'popup' to be configured (details soon)."},
		{"elementParent": "addPopupArea", "elementType": "p", "innerText": "Example: addPopupToWord('content', 'Additional Info', 'Details can be found on mouseover.', 'color: #000')"},
		{"elementParent": "addPopupArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "addPopupArea", "elementType": "p", "innerText": "addPopupToWord(divid, replaceWord, popupText, outputClasses)"},
		{"id": "addPopupAreaList", "elementParent": "addPopupArea", "elementType": "ul"},
		{"elementParent": "addPopupAreaList", "elementType": "li", "innerText": "divid (string) - ID of the element within which you're working."},
		{"elementParent": "addPopupAreaList", "elementType": "li", "innerText": "replaceWord (string) - String to wrap with outer span."},
		{"elementParent": "addPopupAreaList", "elementType": "li", "innerText": "popupText (string) - String to be hidden until mouseover."},
		{"elementParent": "addPopupAreaList", "elementType": "li", "innerText": "outputClasses (string) - CSS classes to be added to the outer span"},

		{"id": "addLinkArea", "elementParent": "textToolsArea"},
		{"elementParent": "addLinkArea", "elementType": "h3", "innerText": "addLinkToWord"},
		{"elementParent": "addLinkArea", "elementType": "h6", "innerText": "Wraps strings in an a(nchor) tag."},
		{"elementParent": "addLinkArea", "elementType": "p", "innerText": "Example: addLinkToWord(divid, replaceWord, URI)"},
		{"elementParent": "addLinkArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "addLinkArea", "elementType": "p", "innerText": "addLinkToWord('content', 'website', 'https://www.gilgamech.com/')"},
		{"id": "addLinkAreaList", "elementParent": "addLinkArea", "elementType": "ul"},
		{"elementParent": "addLinkAreaList", "elementType": "li", "innerText": "divid (string) - ID of element to work within."},
		{"elementParent": "addLinkAreaList", "elementType": "li", "innerText": "replaceWord (string) - String that should become a link."},
		{"elementParent": "addLinkAreaList", "elementType": "li", "innerText": "URI (string) - Href of link."},



		{"elementParent": "cRow", "elementType": "h1", "innerText": "Supporting tools"},
		{"id": "supportingToolsArea", "elementParent": "cRow", "elementClass": "$_.classes.gridInfo"},

		{"id": "webRequestArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "webRequestArea", "elementType": "h3", "innerText": "webRequest"},
		{"elementParent": "webRequestArea", "elementType": "h6", "innerText": "Performs an HTTP request - wrapper for xhRequest, to remove boilerplate and auto-detect options such as content type. Has internal caching feature that provides a response from a Javascript variable instead of performing an xhRequest."},
		{"elementParent": "webRequestArea", "elementType": "p", "innerText": "Example: webRequest('get', 'https://www.gilgamech.com/', function(data,status){externalVariable = data;console.log('status: '+status)}, '', '', 60)"},
		{"elementParent": "webRequestArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "webRequestArea", "elementType": "p", "innerText": "webRequest($verb, $URI, $callback, $JSON, $file, $cached)"},
		{"id": "webRequestAreaList", "elementParent": "webRequestArea", "elementType": "ul"},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$verb (string) - HTTP verb to perform (Get, Post, Put, Head, Options, Delete.)"},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$URI (string) - The HTTP Resource to target."},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$callback (function) - Returns HTTP response data and status code in separate variables. The status can be safely ignored."},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$JSON (switch) - Parse the response data as a JSON object before returning to the callback. Allows you to omit a JSON parsing step i.e. 'responseData = JSON.parse(responseData)'."},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$file (string) - Data to be sent in the body of the request. Often used with Put and sometimes Post requests."},
		{"elementParent": "webRequestAreaList", "elementType": "li", "innerText": "$cached (integer) - Integer seconds to cache this domain. Subsequent requests with $cached set will increase the cache duration, possibly causing the URI to remain cached indefinitely in some situations. Invalidate the cache by reloading the page."},

		{"id": "badPWArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "badPWArea", "elementType": "h3", "innerText": "getBadPW"},
		{"elementParent": "badPWArea", "elementType": "h6", "innerText": "Would make a better password than 'Password' but worse than a NIST standard. Used by addElement to create random IDs for HTML elements when not specified."},
		{"elementParent": "badPWArea", "elementType": "p", "innerText": "Example: var divId = getBadPW();"},
		{"elementParent": "badPWArea", "elementType": "p", "innerText": "Returns: '0.' followed by (string) 16 character pseudo-random string of non-cryptographic integrity."},
		{"elementParent": "badPWArea", "elementType": "p", "innerText": "getBadPW()"},

		{"id": "getKeysArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "getKeysArea", "elementType": "h3", "innerText": "getKeys"},
		{"elementParent": "getKeysArea", "elementType": "h6", "innerText": "Returns the keys of an object. Useful for iterating through the keys, such as the pages in a SPA file: 'for (let key of getKeys(sites.pages)'."},
		{"elementParent": "getKeysArea", "elementType": "p", "innerText": "Example: for (let key of getKeys(sites.pages))"},
		{"elementParent": "getKeysArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "getKeysArea", "elementType": "p", "innerText": "getKeys(obj)"},
		{"id": "getKeysAreaList", "elementParent": "getKeysArea", "elementType": "ul"},
		{"elementParent": "getKeysAreaList", "elementType": "li", "innerText": "obj (list of key-??? pairs) - Any object with keys."},

		{"id": "onlyUniqueArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "onlyUniqueArea", "elementType": "h3", "innerText": "onlyUnique"},
		{"elementParent": "onlyUniqueArea", "elementType": "h6", "innerText": "Checks if a value is unique. Unsure where or how this is used."},
		{"elementParent": "onlyUniqueArea", "elementType": "p", "innerText": "Example: (unsure how this third-party function is used.)"},
		{"elementParent": "onlyUniqueArea", "elementType": "p", "innerText": "Returns: (unsure)"},
		{"elementParent": "onlyUniqueArea", "elementType": "p", "innerText": "onlyUnique(value, index, self)"},
		{"id": "onlyUniqueAreaList", "elementParent": "onlyUniqueArea", "elementType": "ul"},
		{"elementParent": "onlyUniqueAreaList", "elementType": "li", "innerText": "value"},
		{"elementParent": "onlyUniqueAreaList", "elementType": "li", "innerText": "index"},
		{"elementParent": "onlyUniqueAreaList", "elementType": "li", "innerText": "self"},

		{"id": "numToTextArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "numToTextArea", "elementType": "h3", "innerText": "numToTextNotation"},
		{"elementParent": "numToTextArea", "elementType": "h6", "innerText": "Converts an integer with many zeroes into the short scale text equivalent."},
		{"elementParent": "numToTextArea", "elementType": "p", "innerText": "Example: 'numToTextNotation(100000000,2)'"},
		{"elementParent": "numToTextArea", "elementType": "p", "innerText": "Returns: (string) Number in textual format, such as '100 million'."},
		{"elementParent": "numToTextArea", "elementType": "p", "innerText": "numToTextNotation($inputObject, round)"},
		{"id": "numToTextAreaList", "elementParent": "numToTextArea", "elementType": "ul"},
		{"elementParent": "numToTextAreaList", "elementType": "li", "innerText": "$inputObject (integer) - Integer to change format."},
		{"elementParent": "numToTextAreaList", "elementType": "li", "innerText": "round (integer) - Number of digits to round output. Higher precision (8-9) sometimes works better than low precision (1-2), so try increasing the number if the output looks incorrect."},

		{"id": "textToNumArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "textToNumArea", "elementType": "h3", "innerText": "textToNumNotation"},
		{"elementParent": "textToNumArea", "elementType": "h6", "innerText": "Converts a short scale textual number into the integer equivalent."},
		{"elementParent": "textToNumArea", "elementType": "p", "innerText": "Example: 'textToNumNotation(\"100 million\")'"},
		{"elementParent": "textToNumArea", "elementType": "p", "innerText": "Returns: (integer) Number in numerical format, such as '100000000'"},

		{"elementParent": "textToNumArea", "elementType": "p", "innerText": "textToNumNotation($inputObject)"},
		{"id": "textToNumAreaList", "elementParent": "textToNumArea", "elementType": "ul"},
		{"elementParent": "textToNumAreaList", "elementType": "li", "innerText": "$inputObject (string) - String to change format."},

		{"id": "detectEnterArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "detectEnterArea", "elementType": "h3", "innerText": "detectEnter"},
		{"elementParent": "detectEnterArea", "elementType": "h6", "innerText": "Detects if the selected key has been pressed. Useful for triggering another operation, such as loading a page for a search box, or submitting an email in a subscription field."},
		{"elementParent": "detectEnterArea", "elementType": "p", "innerText": "Example: detectEnter(keyInput, function(){appendElement('chatBox',readElement('chatInput'))})"},
		{"elementParent": "detectEnterArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "detectEnterArea", "elementType": "p", "innerText": "detectEnter($keypress, $callback)"},
		{"id": "detectEnterAreaList", "elementParent": "detectEnterArea", "elementType": "ul"},
		{"elementParent": "detectEnterAreaList", "elementType": "li", "innerText": "$keypress (integer) - The integer of the key being pressed."},
		{"elementParent": "detectEnterAreaList", "elementType": "li", "innerText": "$callback (function) - Callback operations to perform when enter is pressed. Has no data variable."},

		{"id": "getRoundedArea", "elementParent": "supportingToolsArea"},
		{"elementParent": "getRoundedArea", "elementType": "h3", "innerText": "getRoundedNumber"},
		{"elementParent": "getRoundedArea", "elementType": "h6", "innerText": "Round a number to the specified number of digits. Returns a number."},
		{"elementParent": "getRoundedArea", "elementType": "p", "innerText": "Example: getRoundedNumber(3.14159, 2)"},
		{"elementParent": "getRoundedArea", "elementType": "p", "innerText": "Returns: (integer or floating point) rounded number, such as 3.14."},
		{"elementParent": "getRoundedArea", "elementType": "p", "innerText": "getRoundedNumber(number, digits)"},
		{"id": "getRoundedAreaList", "elementParent": "getRoundedArea", "elementType": "ul"},
		{"elementParent": "getRoundedAreaList", "elementType": "li", "innerText": "number (integer or floating point) - Floating point or integer to round. Might also work with a string containing only a number."},
		{"elementParent": "getRoundedAreaList", "elementType": "li", "innerText": "digits (integer) - Integer number of digits to round to."},


		{"elementParent": "cRow", "elementType": "h1", "innerText": "Table building tools"},
		{"id": "tableToolsArea", "elementParent": "cRow", "elementClass": "$_.classes.gridInfo"},

		{"id": "mdArrayArea", "elementParent": "tableToolsArea"},
		{"elementParent": "mdArrayArea", "elementType": "h3", "innerText": "mdArrayToTable"},
		{"elementParent": "mdArrayArea", "elementType": "h6", "innerText": "Converts an array of arrays into an HTML Table. This format closely resembles CSV while still being valid JSON."},
		{"elementParent": "mdArrayArea", "elementType": "p", "innerText": "Example:mdArrayToTable('blogPost21', '', [['Name','Score'],['Alice',5],['Bob',5]]) "},
		{"elementParent": "mdArrayArea", "elementType": "p", "innerText": "Returns:  null"},
		{"elementParent": "mdArrayArea", "elementType": "p", "innerText": "mdArrayToTable(parentDivID, newTableID, array)"},
		{"id": "mdArrayAreaList", "elementParent": "mdArrayArea", "elementType": "ul"},
		{"elementParent": "mdArrayAreaList", "elementType": "li", "innerText": "parentDivID (string) - ID of element under which where the table should display."},
		{"elementParent": "mdArrayAreaList", "elementType": "li", "innerText": "newTableID (string) - ID of new table. Uses badPW randomized ID if blank."},
		{"elementParent": "mdArrayAreaList", "elementType": "li", "innerText": "array (array[]) - Data to display as table."},

		{"id": "columnMathArea", "elementParent": "tableToolsArea"},
		{"elementParent": "columnMathArea", "elementType": "h3", "innerText": "columnMath"},
		{"elementParent": "columnMathArea", "elementType": "h6", "innerText": "Performs the specified math operation against all members of two tables, or one table and a constant, outputting to either table or any other table."},
		{"elementParent": "columnMathArea", "elementType": "p", "innerText": "Example: columnMath(MoleTable, 2, MoleTable, 1, 0, MoleTable, 3, 'divide', 4, 'true'); "},
		{"elementParent": "columnMathArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "columnMathArea", "elementType": "p", "innerText": "columnMath(TableAid, inputACol, TableBid, inputBCol, rowBAdj, TableOutid, outputCol, mathOperation, roundDigits, formatMaxOutput, newOutColumnName)"},
		{"id": "columnMathAreaList", "elementParent": "columnMathArea", "elementType": "ul"},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "TableAid (string) - ID of Table A, the first input table."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "inputACol (integer) - Column of Table A to use as first input."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "TableBid (string) - (optional) ID of Table B, the second input table. Leave blank to specify a constant value in the next field."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "inputBCol (integer) - Column of Table B to use as second input. If TableBid is left blank, then the value here will be transformed against all cells in inputACol."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "rowBAdj (integer) - How many rows to adjust the Table B input down. Used when Table B is longer than Table A and the desired data is not at the top of Table B."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "TableOutid (integer) - ID of output table. Can be Table A or Table B, or any other table."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "outputCol (string) - Column of Table Out to use as output. If the column contains other data, it will be overwritten."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "mathOperation (string) - Add, subtract, multiply, divide, or percent (divide also by 100). Any other input here will be ignored and the process will have no output."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "roundDigits (integer) - Number of digits to round output - lower resolution (1,2) might cause errors, to fix try a higher resolution (8,9)."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "formatMaxOutput (switch) - Apply formatMax to the column."},
		{"elementParent": "columnMathAreaList", "elementType": "li", "innerText": "newOutColumnName (string) - Name to be displayed in the Table Header row. If left blank, a name is derived from the column name(s) and mathematical operation."},

		{"id": "addTableArea", "elementParent": "tableToolsArea"},
		{"elementParent": "addTableArea", "elementType": "h3", "innerText": "addTable"},
		{"elementParent": "addTableArea", "elementType": "h6", "innerText": "Adds an HTML table."},
		{"elementParent": "addTableArea", "elementType": "p", "innerText": "Example: addTable('blogPost21', 'table', [['Name','Score'],['Alice',5],['Bob',5]], 'color: #000')"},
		{"elementParent": "addTableArea", "elementType": "p", "innerText": "Returns: null"},
		{"id": "addTableAreaList", "elementParent": "addTableArea", "elementType": "ul"},
		{"elementParent": "addTableAreaList", "elementType": "li", "innerText": "parentDivID (string) - ID of element under which where the table will display."},
		{"elementParent": "addTableAreaList", "elementType": "li", "innerText": "newTableID (string) - ID of new table. Uses badPW randomized ID if blank."},
		{"elementParent": "addTableAreaList", "elementType": "li", "innerText": "columnData (array[]) - Data to display as table."},
		{"elementParent": "addTableAreaList", "elementType": "li", "innerText": "divClass (string) - CSS classes to apply to the table."},

		{"id": "addColumnArea", "elementParent": "tableToolsArea"},
		{"elementParent": "addColumnArea", "elementType": "h3", "innerText": "addColumn"},
		{"elementParent": "addColumnArea", "elementType": "h6", "innerText": "Adds a column of data to an existing table."},
		{"elementParent": "addColumnArea", "elementType": "p", "innerText": "Example: addColumn('table', ['Score',8,5,3,1])"},
		{"elementParent": "addColumnArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "addColumnArea", "elementType": "p", "innerText": "addColumn(tableid, columnData, headLess)"},
		{"id": "addColumnAreaList", "elementParent": "addColumnArea", "elementType": "ul"},
		{"elementParent": "addColumnAreaList", "elementType": "li", "innerText": "tableid (string) - ID of table where the new column will display."},
		{"elementParent": "addColumnAreaList", "elementType": "li", "innerText": "columnData (array[]) - Data to display as table."},
		{"elementParent": "addColumnAreaList", "elementType": "li", "innerText": "headLess (switch) - Skip adding the Table Header row."},

		{"id": "delColumnArea", "elementParent": "tableToolsArea"},
		{"elementParent": "delColumnArea", "elementType": "h3", "innerText": "deleteColumn"},
		{"elementParent": "delColumnArea", "elementType": "h6", "innerText": "Deletes the rightmost column from a table. (Unsure of behavior with RTL languages.)"},
		{"elementParent": "delColumnArea", "elementType": "p", "innerText": "Example: deleteColumn('table')"},
		{"elementParent": "delColumnArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "delColumnArea", "elementType": "p", "innerText": "deleteColumn(tableid)"},
		{"id": "delColumnAreaList", "elementParent": "delColumnArea", "elementType": "ul"},
		{"elementParent": "delColumnAreaList", "elementType": "li", "innerText": "tableid (string) - ID of table to delete."},



		{"elementParent": "cRow", "elementType": "h1", "innerText": "Table supporting tools"},
		{"id": "tableSupportingToolsArea", "elementParent": "cRow", "elementClass": "$_.classes.gridInfo"},

		{"id": "sortAlphaArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "sortAlphaArea", "elementType": "h3", "innerText": "sortAlphaTable"},
		{"elementParent": "sortAlphaArea", "elementType": "h6", "innerText": "Sorts a table based on one column of alphabetic data."},
		{"elementParent": "sortAlphaArea", "elementType": "p", "innerText": "Example: sortAlphaTable(2, 'table')"},
		{"elementParent": "sortAlphaArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "sortAlphaArea", "elementType": "p", "innerText": "sortAlphaTable(currentColumn, tableid)"},
		{"id": "sortAlphaAreaList", "elementParent": "sortAlphaArea", "elementType": "ul"},
		{"elementParent": "sortAlphaAreaList", "elementType": "li", "innerText": "currentColumn (integer) - Column number which will be sorted."},
		{"elementParent": "sortAlphaAreaList", "elementType": "li", "innerText": "tableid (string) - ID of table where the new column will display."},

		{"id": "sortNumArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "sortNumArea", "elementType": "h3", "innerText": "sortNumTable"},
		{"elementParent": "sortNumArea", "elementType": "h6", "innerText": "Sorts a table based on one column of numeric data."},
		{"elementParent": "sortNumArea", "elementType": "p", "innerText": "Example: sortNumTable(2, 'table')"},
		{"elementParent": "sortNumArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "sortNumArea", "elementType": "p", "innerText": "sortNumTable(currentColumn, tableid)"},
		{"id": "sortNumAreaList", "elementParent": "sortNumArea", "elementType": "ul"},
		{"elementParent": "sortNumAreaList", "elementType": "li", "innerText": "currentColumn (integer) - Column number which will be sorted."},
		{"elementParent": "sortNumAreaList", "elementType": "li", "innerText": "tableid (string) - ID of table where the new column will display."},

		{"id": "rotateArrayArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "rotateArrayArea", "elementType": "h3", "innerText": "rotateArray"},
		{"elementParent": "rotateArrayArea", "elementType": "h6", "innerText": "Rotates an array, moving the first item to become the last, second becomes first, each moving forward a spot."},
		{"elementParent": "rotateArrayArea", "elementType": "p", "innerText": "Example: rotateArray([8,5,3], 1)"},
		{"elementParent": "rotateArrayArea", "elementType": "p", "innerText": "Returns: (array) Rotated array, such as: [5,3,8]"},
		{"elementParent": "rotateArrayArea", "elementType": "p", "innerText": "rotateArray(inArray, num)"},
		{"id": "rotateArrayAreaList", "elementParent": "rotateArrayArea", "elementType": "ul"},
		{"elementParent": "rotateArrayAreaList", "elementType": "li", "innerText": "inArray (array) - Array to rotate"},
		{"elementParent": "rotateArrayAreaList", "elementType": "li", "innerText": "num (integer) - Number of places to rotate array."},

		{"id": "groupArrayArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "groupArrayArea", "elementType": "h3", "innerText": "groupArray"},
		{"elementParent": "groupArrayArea", "elementType": "h6", "innerText": "Groups data based on itemName property."},
		{"elementParent": "groupArrayArea", "elementType": "p", "innerText": "Example: groupArray([{'itemName':'alpha','Type':'apple'},{'itemName':'beta','Type':'apple'},{'itemName':'alpha','Type':'orange'}])"},
		{"elementParent": "groupArrayArea", "elementType": "p", "innerText": "Returns:  Array of items with itemName, and a Types array holding one of each distinct Type. Such as [{'itemName':'alpha','Types':['apple','orange']},{'itemName':'beta','Types':['apple']}]"},
		{"elementParent": "groupArrayArea", "elementType": "p", "innerText": "groupArray(arrayToGroup)"},
		{"id": "groupArrayAreaList", "elementParent": "groupArrayArea", "elementType": "ul"},
		{"elementParent": "groupArrayAreaList", "elementType": "li", "innerText": "arrayToGroup (array) - Data to group. Each array member must have itemName and Type properties for the function to operate properly."},

		{"id": "returnAllArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "returnAllArea", "elementType": "h3", "innerText": "returnAllValues"},
		{"elementParent": "returnAllArea", "elementType": "h6", "innerText": "Returns the column values as an array."},
		{"elementParent": "returnAllArea", "elementType": "p", "innerText": "Example: returnAllValues(2, 'table')"},
		{"elementParent": "returnAllArea", "elementType": "p", "innerText": "Returns:  (array) Column values, such as: [8, 2]."},
		{"elementParent": "returnAllArea", "elementType": "p", "innerText": "returnAllValues(col, tableid)"},
		{"id": "returnAllAreaList", "elementParent": "returnAllArea", "elementType": "ul"},
		{"elementParent": "returnAllArea", "elementType": "li", "innerText": "col (integer) - Column number which will be retrieved."},
		{"elementParent": "returnAllArea", "elementType": "li", "innerText": "tableid (string) - ID of table to retrieve data from."},

		{"id": "getMaxArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "getMaxArea", "elementType": "h3", "innerText": "getMaxOfArray"},
		{"elementParent": "getMaxArea", "elementType": "h6", "innerText": "Returns the largest integer in an array. Used in formatMax in tandem with returnAllValues."},
		{"elementParent": "getMaxArea", "elementType": "p", "innerText": "Example: getMaxOfArray([5,3])"},
		{"elementParent": "getMaxArea", "elementType": "p", "innerText": "Returns:  (integer) Largest integer in array, such as: 5"},
		{"elementParent": "getMaxArea", "elementType": "p", "innerText": "getMaxOfArray(array)"},
		{"id": "getMaxAreaList", "elementParent": "getMaxArea", "elementType": "ul"},
		{"elementParent": "getMaxAreaList", "elementType": "li", "innerText": "array (array) - Data."},

		{"id": "getMinArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "getMinArea", "elementType": "h3", "innerText": "getMinOfArray"},
		{"elementParent": "getMinArea", "elementType": "h6", "innerText": "Returns the smallest integer in an array."},
		{"elementParent": "getMinArea", "elementType": "p", "innerText": "getMinOfArray(array)"},
		{"elementParent": "getMinArea", "elementType": "p", "innerText": "Example: getMinOfArray([5,3])"},
		{"elementParent": "getMinArea", "elementType": "p", "innerText": "Returns:  (integer) Smallest integer in array, such as: 3."},
		{"id": "getMinAreaList", "elementParent": "getMinArea", "elementType": "ul"},
		{"elementParent": "getMinAreaList", "elementType": "li", "innerText": "array (array) - Data."},

		{"id": "formatMaxArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "formatMaxArea", "elementType": "h3", "innerText": "formatMax"},
		{"elementParent": "formatMaxArea", "elementType": "h6", "innerText": "Applies CSS styles to all cells in the column, showing the max, and how the rest compare to it."},
		{"elementParent": "formatMaxArea", "elementType": "p", "innerText": "Example: formatMax(2, 'table')"},
		{"elementParent": "formatMaxArea", "elementType": "p", "innerText": "Returns:  null"},
		{"elementParent": "formatMaxArea", "elementType": "p", "innerText": "formatMax(targetColumn, tableid)"},
		{"id": "formatMaxAreaList", "elementParent": "formatMaxArea", "elementType": "ul"},
		{"elementParent": "formatMaxArea", "elementType": "li", "innerText": "col (integer) - Column number which will be retrieved."},
		{"elementParent": "formatMaxArea", "elementType": "li", "innerText": "tableid (string) - ID of table to retrieve data from."},

		{"id": "addRHArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "addRHArea", "elementType": "h3", "innerText": "addRowHandlers"},
		{"elementParent": "addRHArea", "elementType": "h6", "innerText": "Adds createClickHandler as the onclick foreach cell in a column. Unsure where this is used, might be depreciated in a future full version."},
		{"elementParent": "addRHArea", "elementType": "p", "innerText": "Example: (unsure how this third-party function is used.)"},
		{"elementParent": "addRHArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "addRHArea", "elementType": "p", "innerText": "addRowHandlers(col, tableid)"},
		{"id": "addRHAreaList", "elementParent": "addRHArea", "elementType": "ul"},
		{"elementParent": "addRHArea", "elementType": "li", "innerText": "col (integer) - Column number which will be retrieved."},
		{"elementParent": "addRHArea", "elementType": "li", "innerText": "tableid (string) - ID of table to retrieve data from."},

		{"id": "returnTablePartArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "returnTablePartArea", "elementType": "h3", "innerText": "returnTablePart"},
		{"elementParent": "returnTablePartArea", "elementType": "h6", "innerText": "Returns the specified table part - table head or table body."},
		{"elementParent": "returnTablePartArea", "elementType": "p", "innerText": "Example: var tableHead = returnTablePart(tableid,'THEAD');"},
		{"elementParent": "returnTablePartArea", "elementType": "p", "innerText": "Returns: (object) the HTML table part requested."},
		{"elementParent": "returnTablePartArea", "elementType": "p", "innerText": "returnTablePart(tableid, tablePart)"},
		{"id": "returnTablePartAreaList", "elementParent": "returnTablePartArea", "elementType": "ul"},
		{"elementParent": "returnTablePartArea", "elementType": "li", "innerText": "tableid (string) - ID of table to retrieve data from."},
		{"elementParent": "returnTablePartAreaList", "elementType": "li", "innerText": "tablePart (string) - Table part to return. Must be exactly 'THEAD' or 'TBODY'."},

		{"id": "cCHArea", "elementParent": "tableSupportingToolsArea"},
		{"elementParent": "cCHArea", "elementType": "h3", "innerText": "createClickHandler"},
		{"elementParent": "cCHArea", "elementType": "h6", "innerText": "Returns a function which performs formatMax on the table column."},
		{"elementParent": "cCHArea", "elementType": "p", "innerText": "Example: (unsure how this third-party function is used.)"},
		{"elementParent": "cCHArea", "elementType": "p", "innerText": "Returns: null"},
		{"elementParent": "cCHArea", "elementType": "p", "innerText": "createClickHandler(col, table)"},
		{"id": "cCHAreaList", "elementParent": "cCHArea", "elementType": "ul"},
		{"elementParent": "cCHArea", "elementType": "li", "innerText": "col (integer) - Column number which will be formatted."},
		{"elementParent": "cCHArea", "elementType": "li", "innerText": "tableid (string) - ID of table to format."},

		"$_.sections.copyright"
      ]
    }
  }
}